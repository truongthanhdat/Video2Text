# The network is an end to end version of the architecture
# used for the video description experiments of S2VT [1].
# Please consider citing S2VT [1] if you use this example in your work.
#
# [1] S. Venugopalan, M. Rohrbach, J. Donahue, R. Mooney, T. Darrell,
#     K. Saenko. "Sequence to Sequence - Video to Text." ICCV 2015.

# The data is prepared using framefc7_text_to_hdf5.py or
# framefc7_stream_text_to_hdf5.py (with BUFFER_SIZE=1).
# Data is in a single stream.

name: "end2end_s2vt_alexnet"
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include { phase: TRAIN }
  transform_param {
    crop_size: 227
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  image_data_param {
    source: "./rawcorpus/train/yt_train_frame_sequence_1_80_s2vt.txt"
    batch_size: 640
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  top: "stage_indicator"
  top: "inv_stage_indicator"
  include { phase: TRAIN }
  hdf5_data_param {
    source: "./hdf5/buffer_1_s2vt_80/train_batches/hdf5_chunk_list.txt"
    batch_size: 640
  }
}
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-train"
  }
  transform_param {
    crop_size: 227
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  image_data_param {
    source: "./rawcorpus/train/yt_train_frame_sequence_1_80_s2vt.txt"
    batch_size: 640
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  top: "stage_indicator"
  top: "inv_stage_indicator"
  include {
    phase: TEST
    stage: "test-on-train"
  }
  hdf5_data_param {
    source: "./hdf5/buffer_1_s2vt_80/train_batches/hdf5_chunk_list.txt"
    batch_size: 640
  }
}
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-val"
  }
  transform_param {
    crop_size: 227
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  image_data_param {
    source: "./rawcorpus/val/youtube_val_frame_sequence_1_80_s2vt.txt"
    batch_size: 640
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  top: "stage_indicator"
  top: "inv_stage_indicator"
  include {
    phase: TEST
    stage: "test-on-val"
  }
  hdf5_data_param {
    source: "./hdf5/buffer_1_s2vt_80/valid_batches/hdf5_chunk_list.txt"
    batch_size: 640
  }
}
layer {
  name: "silence"
  type: "Silence"
  bottom: "label"
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  include { stage: "freeze-convnet" }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  exclude { stage: "freeze-convnet" }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "reshape_inv_stage_ind"
  type: "Reshape"
  bottom: "inv_stage_indicator"
  top: "reshaped_inv_si"
  reshape_param {
    shape {
      dim: 1
      dim: 640
    }
  }
}
layer {
  name: "padding_gate"
  type: "Eltwise"
  bottom: "fc7"
  bottom: "reshaped_inv_si"
  top: "fc7_padded_input"
  eltwise_param {
    operation: SUM
    coeff_blob: true
  }
}
layer {
  name: "embed_encoder"
  type: "InnerProduct"
  bottom: "fc7_padded_input"
  top: "embedded_in_frames"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0.2
    }
  }
}
layer {
  name: "reshape_frames"
  type: "Reshape"
  bottom: "embedded_in_frames"
  top: "embedded_input_frames"
  reshape_param {
    shape {
      dim: 640
      dim: 1
      dim: 500
    }
  }
}
layer {
  name: "embedding"
  type: "Embed"
  bottom: "input_sentence"
  top: "embedded_input_sentence"
  param {
    lr_mult: 1
  }
  embed_param {
    bias_term: false
    input_dim: 12594 #youtube_vocab+1
    num_output: 500
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "slice_by_videos"
  type: "Slice"
  slice_param { 
    slice_dim: 0 # slice on N(um)
  } 
  bottom: "embedded_input_sentence"
  top: "embedded_video_sent_01"
  top: "embedded_video_sent_02"
  top: "embedded_video_sent_03"
  top: "embedded_video_sent_04"
  top: "embedded_video_sent_05"
  top: "embedded_video_sent_06"
  top: "embedded_video_sent_07"
  top: "embedded_video_sent_08"
}
layer {
  name: "embedding-concat"
  type: "Concat"
  concat_param { concat_dim: 1 } # concat along channel
  bottom: "embedded_video_sent_01"
  bottom: "embedded_video_sent_02"
  bottom: "embedded_video_sent_03"
  bottom: "embedded_video_sent_04"
  bottom: "embedded_video_sent_05"
  bottom: "embedded_video_sent_06"
  bottom: "embedded_video_sent_07"
  bottom: "embedded_video_sent_08"
  top: "embedded_input_video_sentence"
}
layer {
  name: "slice_by_videos"
  type: "Slice"
  slice_param { 
    slice_dim: 0 # slice on N(um)
  } 
  bottom: "embedded_input_frames"
  top: "embedded_video_img_01"
  top: "embedded_video_img_02"
  top: "embedded_video_img_03"
  top: "embedded_video_img_04"
  top: "embedded_video_img_05"
  top: "embedded_video_img_06"
  top: "embedded_video_img_07"
  top: "embedded_video_img_08"
}
layer {
  name: "embedding-concat"
  type: "Concat"
  concat_param { concat_dim: 1 } # concat along channel
  bottom: "embedded_video_img_01"
  bottom: "embedded_video_img_02"
  bottom: "embedded_video_img_03"
  bottom: "embedded_video_img_04"
  bottom: "embedded_video_img_05"
  bottom: "embedded_video_img_06"
  bottom: "embedded_video_img_07"
  bottom: "embedded_video_img_08"
  top: "embedded_input_video_frames"
}

# slice and concat cont, stage_ind and target sentence
layer {
  name: "slice_cont_by_videos"
  type: "Slice"
  slice_param { 
    slice_dim: 0 # slice on N(um)
  } 
  bottom: "cont_sentence"
  top: "cont_video_01"
  top: "cont_video_02"
  top: "cont_video_03"
  top: "cont_video_04"
  top: "cont_video_05"
  top: "cont_video_06"
  top: "cont_video_07"
  top: "cont_video_08"
}
layer {
  name: "cont-concat"
  type: "Concat"
  concat_param { concat_dim: 1 } # concat along channel
  bottom: "cont_video_01"
  bottom: "cont_video_02"
  bottom: "cont_video_03"
  bottom: "cont_video_04"
  bottom: "cont_video_05"
  bottom: "cont_video_06"
  bottom: "cont_video_07"
  bottom: "cont_video_08"
  top: "cont_sequence"
}
layer {
  name: "slice_stage_ind_by_videos"
  type: "Slice"
  slice_param { 
    slice_dim: 0 # slice on N(um)
  } 
  bottom: "stage_indicator"
  top: "stage_ind_video_01"
  top: "stage_ind_video_02"
  top: "stage_ind_video_03"
  top: "stage_ind_video_04"
  top: "stage_ind_video_05"
  top: "stage_ind_video_06"
  top: "stage_ind_video_07"
  top: "stage_ind_video_08"
}
layer {
  name: "stage_ind-concat"
  type: "Concat"
  concat_param { concat_dim: 1 } # concat along channel
  bottom: "stage_ind_video_01"
  bottom: "stage_ind_video_02"
  bottom: "stage_ind_video_03"
  bottom: "stage_ind_video_04"
  bottom: "stage_ind_video_05"
  bottom: "stage_ind_video_06"
  bottom: "stage_ind_video_07"
  bottom: "stage_ind_video_08"
  top: "stage_ind_seq"
}
layer {
  name: "reshape_stage_ind"
  type: "Reshape"
  bottom: "stage_ind_seq"
  top: "stage_ind_sequence"
  reshape_param {
    shape {
      dim: 80
      dim: 8
      dim: 1
    }
  }
}
# slice and concat target sentence
layer {
  name: "slice_target_by_videos"
  type: "Slice"
  slice_param { 
    slice_dim: 0 # slice on N(um)
  } 
  bottom: "target_sentence"
  top: "target_video_01"
  top: "target_video_02"
  top: "target_video_03"
  top: "target_video_04"
  top: "target_video_05"
  top: "target_video_06"
  top: "target_video_07"
  top: "target_video_08"
}
layer {
  name: "target-concat"
  type: "Concat"
  concat_param { concat_dim: 1 } # concat along channel
  bottom: "target_video_01"
  bottom: "target_video_02"
  bottom: "target_video_03"
  bottom: "target_video_04"
  bottom: "target_video_05"
  bottom: "target_video_06"
  bottom: "target_video_07"
  bottom: "target_video_08"
  top: "target_sequence"
}
# unfactored model concat frames and sents
layer {
  name: "concat"
  type: "Concat"
  concat_param { concat_dim: 2 } # concat along h
  bottom: "embedded_input_video_frames"
  bottom: "embedded_input_video_sentence"
  bottom: "stage_ind_sequence"
  top: "embedded_input_video_sequence"
  include { stage: "unfactored" }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_video_sequence"
  bottom: "cont_sequence"
  top: "lstm1"
  include { stage: "unfactored" }
  recurrent_param {
    num_output: 1000
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm2"
  type: "LSTM"
  bottom: "lstm1"
  bottom: "cont_sequence"
  top: "lstm2"
  include {
    stage: "unfactored"
    stage: "2-layer"
  }
  recurrent_param {
    num_output: 1000
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_video_frames"
  bottom: "cont_sequence"
  top: "lstm1"
  include { stage: "factored" }
  recurrent_param {
    num_output: 1000
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "concat"
  type: "Concat"
  concat_param { concat_dim: 2 } # concat along h
  bottom: "lstm1"
  bottom: "embedded_input_video_sentence"
  bottom: "stage_ind_sequence"
  top: "lstm1_video_sequence"
  include { stage: "factored" }
}
layer {
  name: "lstm2"
  type: "LSTM"
  bottom: "lstm1_video_sequence"
  bottom: "cont_sequence"
  top: "lstm2"
  include { stage: "factored" }
  recurrent_param {
    num_output: 1000
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm1"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  exclude { stage: "2-layer" }
  inner_product_param {
    num_output: 12594 # youtube_vocab + 1
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm2"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  include { stage: "2-layer" }
  inner_product_param {
    num_output: 12594 # youtube_vocab + 1
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target_sequence"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict"
  bottom: "target_sequence"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
